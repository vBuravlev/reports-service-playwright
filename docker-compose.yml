version: "3.9"

services:
  postgres_db:
    container_name: reports_service_postgres_container
    image: postgres:latest
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "reports"
      POSTGRES_USER: "userAdmin"
      POSTGRES_PASSWORD: "passwordAdmin"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U reports-user -d reports" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - backend

  pgadmin:
    container_name: reports_service_pgadmin_container
    image: dpage/pgadmin4:latest
    depends_on:
      - postgres_db
    environment:
      PGADMIN_DEFAULT_EMAIL: "pagadmin@user.ru"
      PGADMIN_DEFAULT_PASSWORD: "pgadmin-password"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-O",
          "-",
          "http://localhost:5050/misc/ping"
        ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
    networks:
      - backend

  report-service-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: reports_service_app_container
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ./files-storage:/app/files-storage
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
